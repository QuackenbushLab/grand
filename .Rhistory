else if (num.conditions < 3) {
stop("Not enough expression conditions detected to calculate correlation.")
}
else {
if (verbose)
print("Verified adequate samples, calculating correlation matrix")
if (cpp) {
gene.coreg <- rcpp_ccorr(t(apply(expr.data, 1, function(x) (x -
mean(x))/(sd(x)))))
rownames(gene.coreg) <- rownames(expr.data)
colnames(gene.coreg) <- rownames(expr.data)
}
else {
gene.coreg <- cor(t(expr.data), method = "pearson",
use = "pairwise.complete.obs")
}
}
print(Sys.time() - strt)
if (verbose)
print("More data cleaning")
colnames(motif) <- c("TF", "GENE", "value")
regulatory.network <- spread(motif, GENE, value, fill = 0)
rownames(regulatory.network) <- regulatory.network[, 1]
regulatory.network <- regulatory.network[order(rownames(regulatory.network)),
-1]
regulatory.network <- as.matrix(regulatory.network[, order(colnames(regulatory.network))])
if (!is.null(expr.data)) {
regulatory.network <- regulatory.network[, colnames(regulatory.network) %in%
gene.names]
}
if (verbose)
print("Main calculation")
result <- NULL
if (method == "BERE") {
expr.data <- data.frame(expr.data)
tfdcast <- dcast(motif, TF ~ GENE, fill = 0)
rownames(tfdcast) <- tfdcast[, 1]
tfdcast <- tfdcast[, -1]
expr.data <- expr.data[sort(rownames(expr.data)), ]
tfdcast <- tfdcast[, sort(colnames(tfdcast)), ]
tfNames <- rownames(tfdcast)[rownames(tfdcast) %in%
rownames(expr.data)]
tfdcast <- tfdcast[rownames(tfdcast) %in% tfNames, ]
commonGenes <- intersect(colnames(tfdcast), rownames(expr.data))
expr.data <- expr.data[commonGenes, ]
tfdcast <- tfdcast[, commonGenes]
if (prod(rownames(expr.data) == colnames(tfdcast)) !=
1) {
stop("ID mismatch")
}
directCor <- t(cor(t(expr.data), t(expr.data[rownames(expr.data) %in%
tfNames, ]))^2)
result <- t(apply(regulatory.network, 1, function(x) {
cat(".")
tfTargets <- as.numeric(x)
z <- NULL
if (regularization == "none") {
z <- glm(tfTargets ~ ., data = expr.data, family = "binomial")
if (is.numeric(ni.coefficient.cutoff)) {
coefs <- coef(z)
coefs[summary(z)$coef[, 4] > ni.coefficient.cutoff] <- 0
logit.res <- apply(expr.data, 1, function(x) {
coefs[1] + sum(coefs[-1] * x)
})
return(exp(logit.res)/(1 + exp(logit.res)))
}
else {
return(predict(z, expr.data, type = "response"))
}
}
else {
z <- penalized(tfTargets, expr.data, lambda2 = 10,
model = "logistic", standardize = TRUE)
}
predict(z, expr.data)
}))
if(1-alphaw==0){
consensus <- result * alphaw
}else{
consensus <- directCor * (1 - alphaw) + result * alphaw
}
rownames(consensus) <- rownames(regulatory.network)
colnames(consensus) <- rownames(expr.data)
consensusRange <- max(consensus) - min(consensus)
if (score == "motifincluded") {
consensus <- as.matrix(consensus + consensusRange *
regulatory.network)
}
consensus
}
else if (method == "pearson") {
result <- t(cor(t(expr.data), t(expr.data[rownames(expr.data) %in%
tfNames, ]))^2)
if (score == "motifincluded") {
result <- as.matrix(consensus + consensusRange *
regulatory.network)
}
result
}
else {
strt <- Sys.time()
gene.coreg[is.na(gene.coreg)] <- 0
correlation.dif <- sweep(regulatory.network, 1, rowSums(regulatory.network),
`/`) %*% gene.coreg - sweep(1 - regulatory.network,
1, rowSums(1 - regulatory.network), `/`) %*% gene.coreg
result <- sweep(correlation.dif, 2, apply(correlation.dif,
2, sd), "/")
print(Sys.time() - strt)
if (score == "motifincluded") {
result <- result + max(result) * regulatory.network
}
result
}
return(result)
}
data(yeast)
design <- c(rep(0,20),rep(NA,10),rep(1,20))
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
warnings()
devtools::install_github("tianwangxxx/netZooR@add-monster")
library(MONSTER)
devtools::install_github("twangxxx/netZooR@add-monster")
library(MONSTER)
devtools::install_github("twangxxx/netZooR@add-monster")
library(MONSTER)
devtools::install_github("twangxxx/netZooR@add-monster")
devtools::install_github("twangxxx/netZooR@add-monster")
devtools::install_github("twangxxx/netZooR@add-monster")
library(netZooR)
data(yeast)
design <- c(rep(0,20),rep(NA,10),rep(1,20))
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
View(monster)
library(netZooR)
data(yeast)
design <- c(rep(0,20),rep(NA,10),rep(1,20))
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
warnings()
debug(monster)
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
undebug(monster)
undebug(monsterNI)
devtools::install_github("twangxxx/netZooR@add-monster")
library(netZooR)
data(yeast)
design <- c(rep(0,20),rep(NA,10),rep(1,20))
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
warnings()
debug(monster)
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
debug(monsterNI)
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
devtools::install_github("twangxxx/netZooR@add-monster")
devtools::install_github("twangxxx/netZooR@add-monster")
devtools::install_github("twangxxx/netZooR@add-monster")
library(netZooR)
data(yeast)
design <- c(rep(0,20),rep(NA,10),rep(1,20))
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
remove.packages('netZooR')
library(netZooR)
remove.packages('netZooR')
library(netZooR)
data(yeast)
design <- c(rep(0,20),rep(NA,10),rep(1,20))
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
devtools::install_github("twangxxx/netZooR@add-monster")
devtools::install_github("twangxxx/netZooR@add-monster")
library("devtools")
devtools::install_github("twangxxx/netZooR@add-monster")
devtools::install_github("twangxxx/netZooR@add-monster")
library(netZooR)
devtools::install_github("twangxxx/netZooR@add-monster")
devtools::install_github("netZooR/devel")
devtools::install_github("netZoo/netZooR")
load("/Users/mab8354/Downloads/net2.Rdata")
load("/Users/mab8354/Downloads/net1.Rdata")
load("/Users/mab8354/Downloads/net1.Rdata")
readRDS("/Users/mab8354/Downloads/net1.Rdata")
readRDS("/Users/mab8354/Downloads/net2.Rdata")
net1 = readRDS("/Users/mab8354/Downloads/net1.Rdata")
net2 = readRDS("/Users/mab8354/Downloads/net2.Rdata")
getwd()
alpaca<- panda.to.alpaca(net1, net2, "./TB", verbose=TRUE)
library(netZooR)
alpaca<- panda.to.alpaca(net1, net2, "./TB", verbose=TRUE)
is.nan(net1)
is.na(net1)
which(is.na(net1) == TRUE)
which(is.na(net2) == TRUE)
max(net1['force'])
max(net2['force'])
min(net2['force'])
min(net1['force'])
panda_net1 <- panda_net1[, -3]
colnames(panda_net1) <- c("tf","gene","force")
panda_net2 <- panda_net2[, -3]
colnames(panda_net2) <- c("tf","gene","force")
net1 <- net1[, -3]
colnames(net1) <- c("tf","gene","force")
net2 <- net2[, -3]
colnames(net2) <- c("tf","gene","force")
# ****merge two PANDA network by "tf","motif" column to generate a four-columns data.frame.
# ****rows in panda_net1 that has no matching row in panda_net2 will have NAs in those columns that are usually filled with values from panda_net2.
# net <- merge(panda_net1, panda_net2, by=c("tf","gene","motif"), all.x = T, all.y=T)
# merge two PANDA network by "tf","motif" column to generate a four-columns data.frame.
net <- merge(net1, net2, by=c("tf","gene"))
which( is.na(net) == TRUE)
View(alpaca)
alpaca[[1]]
alpaca[[1]][1]
alpaca[[1]][19811]
alpaca[[1]][20811]
alpaca[[1]][20812]
alpaca[[1]][20811]
alpaca[[2]][20811]
alpaca[[2]]
alpaca[[2]][20797]
alpaca[[2]][1]
alpaca[[1]][1]
alpaca[[1]][2]
alpaca[[1]]
alpaca[[1]][20811]
alpaca[[1]][2]
alpaca[[1]][3]
alpaca[[1]][1]
alpaca[[2]][1]
alpaca[[1]]
alpaca[[1]][20811]
alpaca[[2]]
alpaca[[2]][1]
alpaca[[2]][627]
alpaca[[2]][628]
alpaca<- panda.to.alpaca(net1, net2, "./TB", verbose=TRUE)
net1 = readRDS("/Users/mab8354/Downloads/net1.Rdata")
net2 = readRDS("/Users/mab8354/Downloads/net2.Rdata")
alpaca<- panda.to.alpaca(net1, net2, "./TB", verbose=TRUE)
devtools::install_github("marouenbg/netZooR@fix-for-alpaca")
library(netZooR)
net1 = readRDS("/Users/mab8354/Downloads/net1.Rdata")
net2 = readRDS("/Users/mab8354/Downloads/net2.Rdata")
alpaca<- panda.to.alpaca(net1, net2, "./TB", verbose=TRUE)
library('stringr')
setwd('/Users/mab8354/granddb/src/')
load('GTEx_PANDA_tissues.RData')
generateExpression=0
generateNetworks=0
# Generate tissues expression
if(generateExpression){
for(tissue in unique(samples[,2])){
indTissue = which(samples[,2] == tissue)
matTissue = exp[,indTissue]
write.csv(matTissue,paste0(tissue,".csv"))
}
}
# Initialize dataframe
nTissues = dim(net)[2]
tissues  = colnames(net)
# Convert tissue name to capital letter for compatibility with gtex
nTFs = dim(net)[1]/dim(genes)[1]
k=0
for(tissue in tissues){
k=k+1
pos=gregexpr('_', tissue)
for(i in 1:length(pos[[1]])){
posi=pos[[1]][i]
if(posi != -1){
substr(tissue, posi+1, posi+1) <- toupper(substr(tissue, posi+1, posi+1))
tissues[k] = tissue
}
}
}
cols = c('tissue','tissueLink','tool','netzoo','netzooLink','netzooRel','network','ppi','ppiLink','motif','expression','expLink','tfs','genes','refs')
df <- data.frame(matrix(ncol = length(cols), nrow = nTissues))
colnames(df) = cols
# resave networks
if(generateNetworks){
setwd('/Users/mab8354/granddb/networks')
for(i in 1:nTissues){
d = net[,i]
d <- matrix(d, nrow = nTFs, byrow = TRUE)
rownames(d) = edges$TF[1:nTFs]
colnames(d) = unique(edges$Gene)
write.csv(d,paste0(tissues[i],".csv"))
}
}
# build vectors
expLinkVec = vector()
networkVec = vector()
expressionVec = vector()
for(i in 1:nTissues){
expLinkVec = c(expLinkVec, paste0("https://gtexportal.org/home/eqtls/tissue?tissueName=", tissues[i]))
networkVec = c(networkVec, paste0("https://granddb.s3.amazonaws.com/tissues/networks/",tissues[i], '.csv'))
expressionVec = c(networkVec, paste0("https://granddb.s3.amazonaws.com/tissues/expression/",tissues[i], '.csv'))
}
tissueVec     = colnames(net)
tissueLinkVec = expLinkVec
toolVec       = rep("PANDA", nTissues)
netzooVec     = rep("netZooM", nTissues)
netzooLinkVec = rep("https://github.com/netZoo/netZooM/releases", nTissues)
netzooRelVec  = rep("0.1", nTissues)
#networkVec    = rep("https://granddb.s3.amazonaws.com/tissues/networks/GTEx_PANDA_tissues.RData", nTissues)
ppiVec        = rep("https://granddb.s3.amazonaws.com/tissues/ppi/tissues_ppi.txt", nTissues)
ppiLinkVec    = rep("http://string90.embl.de/", nTissues)
motifVec      = rep("https://granddb.s3.amazonaws.com/tissues/motif/tissues_motif.txt", nTissues)
#expressionVec = rep("https://granddb.s3.amazonaws.com/tissues/expression/tissues_expression.txt", nTissues)
#expLinkVec    =
tfsVec        = rep(nTFs, nTissues)
genesVec      = rep(dim(genes)[1], nTissues)
refsVec       = rep("https://www.cell.com/cell-reports/fulltext/S2211-1247(17)31418-3?_returnURL=https%3A%2F%2Flinkinghub.elsevier.com%2Fretrieve%2Fpii%2FS2211124717314183%3Fshowall%3Dtrue", nTissues)
refsVec2      = rep("https://zenodo.org/record/838734", nTissues)
# Populate df
df['tissue']     = tissueVec
df['tissueLink'] = tissueLinkVec
df['tool']       = toolVec
df['netzoo']     = netzooVec
df['netzooLink'] = netzooLinkVec
df['netzooRel']  = netzooRelVec
df['network']    = networkVec
df['ppi']        = ppiVec
df['ppiLink']    = ppiLinkVec
df['motif']      = motifVec
df['expression'] = expressionVec
df['expLink']    = tissueLinkVec
df['tfs']        = tfsVec
df['genes']      = genesVec
df['refs']       = refsVec
df['refs2']      = refsVec2
# Save to csv
setwd('/Users/mab8354/granddb/')
write.csv(df,"tissues.csv",row.names = FALSE)
expressionVec
library('stringr')
setwd('/Users/mab8354/granddb/src/')
load('GTEx_PANDA_tissues.RData')
generateExpression=0
generateNetworks=0
# Generate tissues expression
if(generateExpression){
for(tissue in unique(samples[,2])){
indTissue = which(samples[,2] == tissue)
matTissue = exp[,indTissue]
write.csv(matTissue,paste0(tissue,".csv"))
}
}
# Initialize dataframe
nTissues = dim(net)[2]
tissues  = colnames(net)
# Convert tissue name to capital letter for compatibility with gtex
nTFs = dim(net)[1]/dim(genes)[1]
k=0
for(tissue in tissues){
k=k+1
pos=gregexpr('_', tissue)
for(i in 1:length(pos[[1]])){
posi=pos[[1]][i]
if(posi != -1){
substr(tissue, posi+1, posi+1) <- toupper(substr(tissue, posi+1, posi+1))
tissues[k] = tissue
}
}
}
cols = c('tissue','tissueLink','tool','netzoo','netzooLink','netzooRel','network','ppi','ppiLink','motif','expression','expLink','tfs','genes','refs')
df <- data.frame(matrix(ncol = length(cols), nrow = nTissues))
colnames(df) = cols
df
library('stringr')
setwd('/Users/mab8354/granddb/src/')
load('GTEx_PANDA_tissues.RData')
generateExpression=0
generateNetworks=0
# Generate tissues expression
if(generateExpression){
for(tissue in unique(samples[,2])){
indTissue = which(samples[,2] == tissue)
matTissue = exp[,indTissue]
write.csv(matTissue,paste0(tissue,".csv"))
}
}
# Initialize dataframe
nTissues = dim(net)[2]
tissues  = colnames(net)
# Convert tissue name to capital letter for compatibility with gtex
nTFs = dim(net)[1]/dim(genes)[1]
k=0
for(tissue in tissues){
k=k+1
pos=gregexpr('_', tissue)
for(i in 1:length(pos[[1]])){
posi=pos[[1]][i]
if(posi != -1){
substr(tissue, posi+1, posi+1) <- toupper(substr(tissue, posi+1, posi+1))
tissues[k] = tissue
}
}
}
cols = c('tissue','tissueLink','tool','netzoo','netzooLink','netzooRel','network','ppi','ppiLink','motif','expression','expLink','tfs','genes','refs')
df <- data.frame(matrix(ncol = length(cols), nrow = nTissues))
colnames(df) = cols
# resave networks
if(generateNetworks){
setwd('/Users/mab8354/granddb/networks')
for(i in 1:nTissues){
d = net[,i]
d <- matrix(d, nrow = nTFs, byrow = TRUE)
rownames(d) = edges$TF[1:nTFs]
colnames(d) = unique(edges$Gene)
write.csv(d,paste0(tissues[i],".csv"))
}
}
# build vectors
expLinkVec = vector()
networkVec = vector()
expressionVec = vector()
for(i in 1:nTissues){
expLinkVec = c(expLinkVec, paste0("https://gtexportal.org/home/eqtls/tissue?tissueName=", tissues[i]))
networkVec = c(networkVec, paste0("https://granddb.s3.amazonaws.com/tissues/networks/",tissues[i], '.csv'))
expressionVec = c(networkVec, paste0("https://granddb.s3.amazonaws.com/tissues/expression/",tissues[i], '.csv'))
}
expressionVec
expressionVec = vector()
expressionVec
library('stringr')
setwd('/Users/mab8354/granddb/src/')
load('GTEx_PANDA_tissues.RData')
generateExpression=0
generateNetworks=0
# Generate tissues expression
if(generateExpression){
for(tissue in unique(samples[,2])){
indTissue = which(samples[,2] == tissue)
matTissue = exp[,indTissue]
write.csv(matTissue,paste0(tissue,".csv"))
}
}
# Initialize dataframe
nTissues = dim(net)[2]
tissues  = colnames(net)
# Convert tissue name to capital letter for compatibility with gtex
nTFs = dim(net)[1]/dim(genes)[1]
k=0
for(tissue in tissues){
k=k+1
pos=gregexpr('_', tissue)
for(i in 1:length(pos[[1]])){
posi=pos[[1]][i]
if(posi != -1){
substr(tissue, posi+1, posi+1) <- toupper(substr(tissue, posi+1, posi+1))
tissues[k] = tissue
}
}
}
cols = c('tissue','tissueLink','tool','netzoo','netzooLink','netzooRel','network','ppi','ppiLink','motif','expression','expLink','tfs','genes','refs')
df <- data.frame(matrix(ncol = length(cols), nrow = nTissues))
colnames(df) = cols
# resave networks
if(generateNetworks){
setwd('/Users/mab8354/granddb/networks')
for(i in 1:nTissues){
d = net[,i]
d <- matrix(d, nrow = nTFs, byrow = TRUE)
rownames(d) = edges$TF[1:nTFs]
colnames(d) = unique(edges$Gene)
write.csv(d,paste0(tissues[i],".csv"))
}
}
# build vectors
expLinkVec = vector()
networkVec = vector()
expressionVec = vector()
for(i in 1:nTissues){
expLinkVec = c(expLinkVec, paste0("https://gtexportal.org/home/eqtls/tissue?tissueName=", tissues[i]))
networkVec = c(networkVec, paste0("https://granddb.s3.amazonaws.com/tissues/networks/",tissues[i], '.csv'))
expressionVec = c(expressionVec, paste0("https://granddb.s3.amazonaws.com/tissues/expression/",tissues[i], '.csv'))
}
tissueVec     = colnames(net)
tissueLinkVec = expLinkVec
toolVec       = rep("PANDA", nTissues)
netzooVec     = rep("netZooM", nTissues)
netzooLinkVec = rep("https://github.com/netZoo/netZooM/releases", nTissues)
netzooRelVec  = rep("0.1", nTissues)
#networkVec    = rep("https://granddb.s3.amazonaws.com/tissues/networks/GTEx_PANDA_tissues.RData", nTissues)
ppiVec        = rep("https://granddb.s3.amazonaws.com/tissues/ppi/tissues_ppi.txt", nTissues)
ppiLinkVec    = rep("http://string90.embl.de/", nTissues)
motifVec      = rep("https://granddb.s3.amazonaws.com/tissues/motif/tissues_motif.txt", nTissues)
#expressionVec = rep("https://granddb.s3.amazonaws.com/tissues/expression/tissues_expression.txt", nTissues)
#expLinkVec    =
tfsVec        = rep(nTFs, nTissues)
genesVec      = rep(dim(genes)[1], nTissues)
refsVec       = rep("https://www.cell.com/cell-reports/fulltext/S2211-1247(17)31418-3?_returnURL=https%3A%2F%2Flinkinghub.elsevier.com%2Fretrieve%2Fpii%2FS2211124717314183%3Fshowall%3Dtrue", nTissues)
refsVec2      = rep("https://zenodo.org/record/838734", nTissues)
# Populate df
df['tissue']     = tissueVec
df['tissueLink'] = tissueLinkVec
df['tool']       = toolVec
df['netzoo']     = netzooVec
df['netzooLink'] = netzooLinkVec
df['netzooRel']  = netzooRelVec
df['network']    = networkVec
df['ppi']        = ppiVec
df['ppiLink']    = ppiLinkVec
df['motif']      = motifVec
df['expression'] = expressionVec
df['expLink']    = tissueLinkVec
df['tfs']        = tfsVec
df['genes']      = genesVec
df['refs']       = refsVec
df['refs2']      = refsVec2
# Save to csv
setwd('/Users/mab8354/granddb/')
write.csv(df,"tissues.csv",row.names = FALSE)
