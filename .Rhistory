install.packages("knitr")
BiocManager::install("STRINGdb")
library(STRINGdb)
string_db <- STRINGdb$new( version="11", species=9606,
+ score_threshold=0, input_directory="" )
string_db <- STRINGdb$new( version="11", species=9606,
score_threshold=0, input_directory="" )
string_db <- STRINGdb$new( version="10", species=9606,
score_threshold=0, input_directory="" )
get_interactions()
string$db
string_db
string_db
STRINGdb$methods()
STRINGdb$export
export(STRINGdb)
STRINGdb$export
STRINGdb$export
string_db$get_proteins
string_db$get_proteins()
a=string_db$get_proteins()
View(a)
string_db$export()
b=string_db$export()
string_db$export()
string_db$get_proteins()
string_db$export()
b=string_db$get_graph()
View(b)
string_db$get_graph()
b=string_db$get_graph()
string_db$help("get_graph")
string_db$help("get_graph")
View(b)
b=string_db$get_graph()
b
c = as_adjacency_matrix(b)
library(igraph)
install.packages('igraph')
library(STRINGdb)
library(igraph)
b=string_db$get_graph()
string_db <- STRINGdb$new( version="10", species=9606,
score_threshold=0, input_directory="" )
a=string_db$get_proteins()
b=string_db$get_graph()
c=as_adjacency_matrix(b)
c
c=as_adjacency_matrix(b, attr="weight")
c=as_adjacency_matrix(b, attr="graph")
c=as_adjacency_matrix(b, attr="env")
c=as_adjacency_matrix(b)
edge_density(b)
c=as_adjacency_matrix(b, type="both")
edge_density(c)
edge_density(b)
c=as_adjacency_matrix(b, type="both", edges=true)
c=as_adjacency_matrix(b, type="both", edges=TRUE)
devtools::install_github("twangxxx/netZooR")
devtools::install_github("twangxxx/netZooR")
devtools::install_github("netZoo/netZooR")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
install.packages('Biobase')
install.packages("Biobase")
library(GEOquery)
install.packages("GEOquery")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(Biobase)
library(GEOquery)
install.packages("GEOquery")
install.packages("GEOquery")
install.packages("GEOquery")
install.packages("GEOquery")
install.packages("GEOquery")
setRepositories()
install.packages("GEOquery")
install.packages("readr")
install.packages("dplyr")
install.packages("tidyr")
setRepositories()
install.packages("tidyr")
setRepositories()
install.packages("tidyr")
setRepositories()
install.packages("tidyr")
setRepositories()
install.packages("tidyr")
setRepositories()
install.packages("tidyr")
setRepositories()
install.packages("tidyr")
setRepositories()
install.packages("tidyr")
setRepositories()
install.packages("tidyr")
setRepositories()
install.packages("tidyr")
install.packages("tidyr", repos = 'https://cloud.r-project.org')
install.packages("readr", repos = 'https://cloud.r-project.org')
install.packages("dplyr", repos = 'https://cloud.r-project.org')
install.packages("GEOquery")
gset <- getGEO("GSE50588", GSEMatrix =TRUE, getGPL=FALSE)
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE50588", GSEMatrix =TRUE, getGPL=FALSE)
View(gset)
library(limma)
install.packages("limma")
install.packages("limma")
gset <- getGEO("GSE50588", GSEMatrix =TRUE, AnnotGPL=TRUE)
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE50588", GSEMatrix =TRUE, AnnotGPL=TRUE)
gset <- getGEO("GSE50588", GSEMatrix =TRUE, AnnotGPL=TRUE)
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("XXXXXXXX0011XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"X")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
fvarLabels(gset)
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
gset
gset[ ,1]
gset <- getGEO("GSE50588", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL10558", attr(gset, "names")) else idx <- 1
idx
gset[[idx]]
gset[[2]]
gset[[1]]
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE50588", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL10558", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
fvarLabels(gset) <- make.names(fvarLabels(gset))
gsms <- paste0("XXXXXXXX0011XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"X")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE50588", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL10558", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
gsms <- paste0("XXXXXXXX0011XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"X")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")  set group names
sml <- paste("G", sml, sep="")  #set group names
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("control","trt")
# set parameters and draw the plot
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE50588", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
fit2
fit2.topTable
write.table(tT, file=stdout(), row.names=F, sep="\t")
View(tT)
tT <- topTable(fit2, adjust="fdr", sort.by="adj.P.Val", number=250)
View(fit2)
View(fit2)
View(tT)
View(fit2)
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
# R scripts generated  Mon Aug 12 14:39:47 EDT 2019
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE50588", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL10558", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("1XXXX0XXXXXXXXXXXX0X0XXXXXXXXXXXXXXX10XXXXX0XXXXXX",
"XXXXXXXXX0XX0XXXXXXXXXXXXXXXXXXXXXX00XXXXXX0XXXXXX",
"XXXXXXX01XXXXX0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXX000000XXXXXXXXXXXXXXXXX",
"X")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE50588", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL10558", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
gsms <- paste0("1XXXX0XXXXXXXXXXXX0X0XXXXXXXXXXXXXXX10XXXXX0XXXXXX",
"XXXXXXXXX0XX0XXXXXXXXXXXXXXXXXXXXXX00XXXXXX0XXXXXX",
"XXXXXXX01XXXXX0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXX000000XXXXXXXXXXXXXXXXX",
"X")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")  set group names
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("control","jund")
# set parameters and draw the plot
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE50588", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
sml <- paste("G", sml, sep="")  #set group names
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("control","jund")
# set parameters and draw the plot
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE50588", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE50588", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
sml <- sml[sel]
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
# R scripts generated  Mon Aug 12 14:39:47 EDT 2019
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE50588", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL10558", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("1XXXX0XXXXXXXXXXXX0X0XXXXXXXXXXXXXXX10XXXXX0XXXXXX",
"XXXXXXXXX0XX0XXXXXXXXXXXXXXXXXXXXXX00XXXXXX0XXXXXX",
"XXXXXXX01XXXXX0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXX000000XXXXXXXXXXXXXXXXX",
"X")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE50588", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL10558", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
gsms <- paste0("1XXXX0XXXXXXXXXXXX0X0XXXXXXXXXXXXXXX10XXXXX0XXXXXX",
"XXXXXXXXX0XX0XXXXXXXXXXXXXXXXXXXXXX00XXXXXX0XXXXXX",
"XXXXXXX01XXXXX0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXX000000XXXXXXXXXXXXXXXXX",
"X")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")  #set group names
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("control","jund")
# set parameters and draw the plot
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE50588", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
tT
View(tT)
library('stringr')
setwd('/Users/mab8354/granddb/src')
load('GTEx_PANDA_tissues.RData')
# Initialize dataframe
nTissues = dim(net)[2]
tissues  = colnames(net)
# Convert tissue name to capital letter for compatibility with gtex
nTFs = dim(net)[1]/dim(genes)[1]
k=0
for(tissue in tissues){
k=k+1
pos=gregexpr('_', tissue)
for(i in 1:length(pos[[1]])){
posi=pos[[1]][i]
if(posi != -1){
substr(tissue, posi+1, posi+1) <- toupper(substr(tissue, posi+1, posi+1))
tissues[k] = tissue
}
}
}
cols = c('tissue','tissueLink','tool','netzoo','netzooLink','netzooRel','network','ppi','ppiLink','motif','expression','expLink','tfs','genes','refs')
df <- data.frame(matrix(ncol = length(cols), nrow = nTissues))
colnames(df) = cols
# resave networks
setwd('/Users/mab8354/granddb/networks')
for(i in 1:nTissues){
d = net[,i]
d <- matrix(d, nrow = nTFs, byrow = TRUE)
rownames(d) = edges$TF[1:nTFs]
colnames(d) = unique(edges$Gene)
write.csv(d,paste0(tissues[i],".csv"))
}
# build vectors
expLinkVec = vector()
networkVec = vector()
for(i in 1:nTissues){
expLinkVec = c(expLinkVec, paste0("https://gtexportal.org/home/eqtls/tissue?tissueName=", tissues[i]))
networkVec = c(networkVec, paste0("https://granddb.s3.amazonaws.com/tissues/networks/",tissues[i], '.csv'))
}
tissueVec     = colnames(net)
tissueLinkVec = expLinkVec
toolVec       = rep("PANDA", nTissues)
netzooVec     = rep("netZooM", nTissues)
netzooLinkVec = rep("https://github.com/netZoo/netZooM/releases", nTissues)
netzooRelVec  = rep("0.1", nTissues)
#networkVec    = rep("https://granddb.s3.amazonaws.com/tissues/networks/GTEx_PANDA_tissues.RData", nTissues)
ppiVec        = rep("https://granddb.s3.amazonaws.com/tissues/ppi/tissues_ppi.txt", nTissues)
ppiLinkVec    = rep("http://string90.embl.de/", nTissues)
motifVec      = rep("https://granddb.s3.amazonaws.com/tissues/motif/tissues_motif.txt", nTissues)
expressionVec = rep("https://granddb.s3.amazonaws.com/tissues/expression/tissues_expression.txt", nTissues)
#expLinkVec    =
tfsVec        = rep(nTFs, nTissues)
genesVec      = rep(dim(genes)[1], nTissues)
refsVec       = rep("https://www.cell.com/cell-reports/fulltext/S2211-1247(17)31418-3?_returnURL=https%3A%2F%2Flinkinghub.elsevier.com%2Fretrieve%2Fpii%2FS2211124717314183%3Fshowall%3Dtrue", nTissues)
# Populate df
df['tissue']     = tissueVec
df['tissueLink'] = tissueLinkVec
df['tool']       = toolVec
df['netzoo']     = netzooVec
df['netzooLink'] = netzooLinkVec
df['netzooRel']  = netzooRelVec
df['network']    = networkVec
df['ppi']        = ppiVec
df['ppiLink']    = ppiLinkVec
df['motif']      = motifVec
df['expression'] = expressionVec
df['expLink']    = tissueLinkVec
df['tfs']        = tfsVec
df['genes']      = genesVec
df['refs']       = refsVec
# Save to csv
setwd('/Users/mab8354/granddb/')
write.csv(df,"tissues.csv",row.names = FALSE)
