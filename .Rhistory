gset <- gset[ ,sel]
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("control","trt")
# set parameters and draw the plot
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE50588", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
fit2
fit2.topTable
write.table(tT, file=stdout(), row.names=F, sep="\t")
View(tT)
tT <- topTable(fit2, adjust="fdr", sort.by="adj.P.Val", number=250)
View(fit2)
View(fit2)
View(tT)
View(fit2)
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
# R scripts generated  Mon Aug 12 14:39:47 EDT 2019
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE50588", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL10558", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("1XXXX0XXXXXXXXXXXX0X0XXXXXXXXXXXXXXX10XXXXX0XXXXXX",
"XXXXXXXXX0XX0XXXXXXXXXXXXXXXXXXXXXX00XXXXXX0XXXXXX",
"XXXXXXX01XXXXX0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXX000000XXXXXXXXXXXXXXXXX",
"X")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE50588", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL10558", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
gsms <- paste0("1XXXX0XXXXXXXXXXXX0X0XXXXXXXXXXXXXXX10XXXXX0XXXXXX",
"XXXXXXXXX0XX0XXXXXXXXXXXXXXXXXXXXXX00XXXXXX0XXXXXX",
"XXXXXXX01XXXXX0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXX000000XXXXXXXXXXXXXXXXX",
"X")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")  set group names
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("control","jund")
# set parameters and draw the plot
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE50588", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
sml <- paste("G", sml, sep="")  #set group names
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("control","jund")
# set parameters and draw the plot
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE50588", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE50588", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
sml <- sml[sel]
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
# R scripts generated  Mon Aug 12 14:39:47 EDT 2019
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE50588", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL10558", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("1XXXX0XXXXXXXXXXXX0X0XXXXXXXXXXXXXXX10XXXXX0XXXXXX",
"XXXXXXXXX0XX0XXXXXXXXXXXXXXXXXXXXXX00XXXXXX0XXXXXX",
"XXXXXXX01XXXXX0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXX000000XXXXXXXXXXXXXXXXX",
"X")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE50588", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL10558", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
gsms <- paste0("1XXXX0XXXXXXXXXXXX0X0XXXXXXXXXXXXXXX10XXXXX0XXXXXX",
"XXXXXXXXX0XX0XXXXXXXXXXXXXXXXXXXXXX00XXXXXX0XXXXXX",
"XXXXXXX01XXXXX0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXX000000XXXXXXXXXXXXXXXXX",
"X")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")  #set group names
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("control","jund")
# set parameters and draw the plot
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE50588", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
tT
View(tT)
library('devtools')
devtools::install_github("MONSTER")
library('devtools')
devtools::install_github("QuackenbushLab/MONSTER")
data(yeast)
design <- c(rep(0,20),rep(NA,10),rep(1,20))
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
library('MONSTER')
data(yeast)
design <- c(rep(0,20),rep(NA,10),rep(1,20))
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
traceback()
yeast$motif
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
data(yeast)
design <- c(rep(0,20),rep(1,10),rep(1,20))
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
yeast$exp.cc[1:500,]
is.na(yeast$exp.cc[1:500,])
which(is.na(yeast$exp.cc[1:500,]) == True)
which(is.na(yeast$exp.cc[1:500,]) == TRUE)
yeast$exp.cc[1:500,285]
yeast$exp.cc[285]
yeast$exp.cc[285,:]
yeast$exp.cc[285,\]
yeast$exp.cc[285,]
is.na(yeast$motif)
which(is.na(yeast$motif) == True)
which(is.na(yeast$motif) == TRUE)
which(is.na(yeast$exp.cc[1:500,]) == TRUE)
which(is.na(yeast$exp.cc[1:500,]) == TRUE)
yeast$exp.cc[621,]
yeast$exp.cc[285,]
yeast$exp.cc[1:500,]
z=yeast$exp.cc[1:500,]
ind
ind = which(is.na(yeast$exp.cc[1:500,]) == TRUE)
ind
z[285]
z[1:500,285]
ind = which(is.na(yeast$exp.cc[1:500,]) == TRUE, arr.ind=TRUE))
ind = which(is.na(yeast$exp.cc[1:500,]) == TRUE, arr.ind=TRUE)
ind
ind[285,1] = 0
ind[121,1] = 0
ind[62,20] = 0
ind[172,21]= 0
yeast[285,1] = 0
yeast[121,1] = 0
yeast[62,20] = 0
yeast[172,21]= 0
yeast$exp.cc[285,1] = 0
yeast$exp.cc[121,1] = 0
yeast$exp.cc[62,20] = 0
yeast$exp.cc[172,21]= 0
ind = which(is.na(yeast$exp.cc[1:500,]) == TRUE, arr.ind=TRUE)
ind
yeast$exp.cc[121,2] = 0
ind
ind = which(is.na(yeast$exp.cc[1:500,]) == TRUE, arr.ind=TRUE)
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
ind = which(is.na(yeast$motif) == TRUE, arr.ind=TRUE)
ind
library('devtools')
devtools::install_github("QuackenbushLab/MONSTER")
library('MONSTER')
data(yeast)
design <- c(rep(0,20),rep(NA,10),rep(1,20))
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
traceback()
debug(monster)
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
debug(monsterNI)
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
debug(foreach)
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
expr[sample(seq_along(c(expr)))]
nullExprCases <- nullExpr[, design == 1]
nullExprControls <- nullExpr[, design == 0]
tmpNetCases <- monsterNI(motif, nullExprCases, method = ni_method,
regularization = "none", score = "none", ni.coefficient.cutoff)
undebug(monsterNI)
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
if (i != 1) {
nullExpr[] <- expr[sample(seq_along(c(expr)))]
}
i=1
if (i != 1) {
nullExpr[] <- expr[sample(seq_along(c(expr)))]
}
i=2
if (i != 1) {
nullExpr[] <- expr[sample(seq_along(c(expr)))]
}
nullExpr
nullExpr[]
nullExprCases <- nullExpr[, design == 1]
nullExprControls <- nullExpr[, design == 0]
tmpNetCases <- monsterNI(motif, nullExprCases, method = ni_method,
regularization = "none", score = "none", ni.coefficient.cutoff)
debug(monsterNI)
tmpNetCases <- monsterNI(motif, nullExprCases, method = ni_method,
regularization = "none", score = "none", ni.coefficient.cutoff)
tmpNetCases <- monsterNI(motif, nullExprCases, method = ni_method,
regularization = "none", score = "none", ni.coefficient.cutoff)
verbose=TRUE
verbose=FALSE
if (verbose)
print("Initializing and validating")
tf.names <- sort(unique(motif.data[, 1]))
num.TFs <- length(tf.names)
if (is.null(expr.data)) {
stop("Error: Expression data null")
}
else {
gene.names <- sort(intersect(motif.data[, 2], rownames(expr.data)))
num.genes <- length(gene.names)
expr.data <- expr.data[rownames(expr.data) %in% gene.names,
]
expr.data <- expr.data[order(rownames(expr.data)), ]
num.conditions <- ncol(expr.data)
if (randomize == "within.gene") {
expr.data <- t(apply(expr.data, 1, sample))
if (verbose)
print("Randomizing by reordering each gene's expression")
}
else if (randomize == "by.genes") {
rownames(expr.data) <- sample(rownames(expr.data))
expr.data <- expr.data[order(rownames(expr.data)),
]
if (verbose)
print("Randomizing by reordering each gene labels")
}
}
(is.null(expr.data))
gene.names <- sort(intersect(motif.data[, 2], rownames(expr.data)))
num.genes <- length(gene.names)
expr.data <- expr.data[rownames(expr.data) %in% gene.names,
]
expr.data <- expr.data[order(rownames(expr.data)), ]
num.conditions <- ncol(expr.data)
randomize = "none"
if (verbose)
print("Initializing and validating")
tf.names <- sort(unique(motif.data[, 1]))
num.TFs <- length(tf.names)
if (is.null(expr.data)) {
stop("Error: Expression data null")
}
else {
gene.names <- sort(intersect(motif.data[, 2], rownames(expr.data)))
num.genes <- length(gene.names)
expr.data <- expr.data[rownames(expr.data) %in% gene.names,
]
expr.data <- expr.data[order(rownames(expr.data)), ]
num.conditions <- ncol(expr.data)
if (randomize == "within.gene") {
expr.data <- t(apply(expr.data, 1, sample))
if (verbose)
print("Randomizing by reordering each gene's expression")
}
else if (randomize == "by.genes") {
rownames(expr.data) <- sample(rownames(expr.data))
expr.data <- expr.data[order(rownames(expr.data)),
]
if (verbose)
print("Randomizing by reordering each gene labels")
}
}
if (is.null(expr.data)) {
stop("Error: Expression data null")
}
else {
gene.names <- sort(intersect(motif.data[, 2], rownames(expr.data)))
num.genes <- length(gene.names)
expr.data <- expr.data[rownames(expr.data) %in% gene.names,
]
expr.data <- expr.data[order(rownames(expr.data)), ]
num.conditions <- ncol(expr.data)
if (randomize == "within.gene") {
expr.data <- t(apply(expr.data, 1, sample))
if (verbose)
print("Randomizing by reordering each gene's expression")
}
else if (randomize == "by.genes") {
rownames(expr.data) <- sample(rownames(expr.data))
expr.data <- expr.data[order(rownames(expr.data)),
]
if (verbose)
print("Randomizing by reordering each gene labels")
}
}
(num.genes == 0)
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
nullPerms = 100, ni_method = "BERE",
ni.coefficient.cutoff = NA, numMaxCores = 1, outputDir = NA
i=1
if (i != 1) {
nullExpr[] <- expr[sample(seq_along(c(expr)))]
}
nullExprCases <- nullExpr[, design == 1]
nullExprControls <- nullExpr[, design == 0]
tmpNetCases <- monsterNI(motif, nullExprCases, method = ni_method,
regularization = "none", score = "none", ni.coefficient.cutoff)
tmpNetCases <- monsterNI(motif, nullExprCases, method = ni_method,
regularization = "none", score = "none", ni.coefficient.cutoff)
monsterRes <- monster(yeast$exp.cc[1:500,], design, yeast$motif, nullPerms=10, numMaxCores=4)
monsterNI
tmpNetCases <- monsterNI(motif, nullExprCases, method = ni_method,
regularization = "none", score = "none", ni.coefficient.cutoff)
library('stringr')
setwd('/Users/mab8354/granddb/src')
load('GTEx_PANDA_tissues.RData')
# Initialize dataframe
nTissues = dim(net)[2]
tissues  = colnames(net)
# Convert tissue name to capital letter for compatibility with gtex
nTFs = dim(net)[1]/dim(genes)[1]
k=0
for(tissue in tissues){
k=k+1
pos=gregexpr('_', tissue)
for(i in 1:length(pos[[1]])){
posi=pos[[1]][i]
if(posi != -1){
substr(tissue, posi+1, posi+1) <- toupper(substr(tissue, posi+1, posi+1))
tissues[k] = tissue
}
}
}
cols = c('tissue','tissueLink','tool','netzoo','netzooLink','netzooRel','network','ppi','ppiLink','motif','expression','expLink','tfs','genes','refs')
df <- data.frame(matrix(ncol = length(cols), nrow = nTissues))
colnames(df) = cols
# resave networks
setwd('/Users/mab8354/granddb/networks')
for(i in 1:nTissues){
d = net[,i]
d <- matrix(d, nrow = nTFs, byrow = TRUE)
rownames(d) = edges$TF[1:nTFs]
colnames(d) = unique(edges$Gene)
write.csv(d,paste0(tissues[i],".csv"))
}
# build vectors
expLinkVec = vector()
networkVec = vector()
for(i in 1:nTissues){
expLinkVec = c(expLinkVec, paste0("https://gtexportal.org/home/eqtls/tissue?tissueName=", tissues[i]))
networkVec = c(networkVec, paste0("https://granddb.s3.amazonaws.com/tissues/networks/",tissues[i], '.csv'))
}
tissueVec     = colnames(net)
tissueLinkVec = expLinkVec
toolVec       = rep("PANDA", nTissues)
netzooVec     = rep("netZooM", nTissues)
netzooLinkVec = rep("https://github.com/netZoo/netZooM/releases", nTissues)
netzooRelVec  = rep("0.1", nTissues)
#networkVec    = rep("https://granddb.s3.amazonaws.com/tissues/networks/GTEx_PANDA_tissues.RData", nTissues)
ppiVec        = rep("https://granddb.s3.amazonaws.com/tissues/ppi/tissues_ppi.txt", nTissues)
ppiLinkVec    = rep("http://string90.embl.de/", nTissues)
motifVec      = rep("https://granddb.s3.amazonaws.com/tissues/motif/tissues_motif.txt", nTissues)
expressionVec = rep("https://granddb.s3.amazonaws.com/tissues/expression/tissues_expression.txt", nTissues)
#expLinkVec    =
tfsVec        = rep(nTFs, nTissues)
genesVec      = rep(dim(genes)[1], nTissues)
refsVec       = rep("https://www.cell.com/cell-reports/fulltext/S2211-1247(17)31418-3?_returnURL=https%3A%2F%2Flinkinghub.elsevier.com%2Fretrieve%2Fpii%2FS2211124717314183%3Fshowall%3Dtrue", nTissues)
refsVec2      = rep("https://zenodo.org/record/838734", nTissues)
# Populate df
df['tissue']     = tissueVec
df['tissueLink'] = tissueLinkVec
df['tool']       = toolVec
df['netzoo']     = netzooVec
df['netzooLink'] = netzooLinkVec
df['netzooRel']  = netzooRelVec
df['network']    = networkVec
df['ppi']        = ppiVec
df['ppiLink']    = ppiLinkVec
df['motif']      = motifVec
df['expression'] = expressionVec
df['expLink']    = tissueLinkVec
df['tfs']        = tfsVec
df['genes']      = genesVec
df['refs']       = refsVec
df['refs2']      = refsVec2
# Save to csv
setwd('/Users/mab8354/granddb/')
write.csv(df,"tissues.csv",row.names = FALSE)
library(netZooR)
?runAlpaca
devtools::install_github("netZoo/netZooR")`
library(netZooR)
``
devtools::install_github("netZoo/netZooR")
library(netZooR)
treated_expression_file_path <- system.file("extdata", "expr4_matched.txt", package = "netZooR", mustWork = TRUE)
control_expression_file_path <- system.file("extdata", "expr10_matched.txt", package = "netZooR", mustWork = TRUE)
motif_file_path <- system.file("extdata", "chip_matched.txt", package = "netZooR", mustWork = TRUE)
ppi_file_path <- system.file("extdata", "ppi_matched.txt", package = "netZooR", mustWork = TRUE)
treated_panda_net <- runPanda(e = treated_expression_file_path, m = motif_file_path, ppi = ppi_file_path, rm_missing = TRUE )$panda
control_panda_net <- runPanda(e = control_expression_file_path, m = motif_file_path, ppi = ppi_file_path, rm_missing = TRUE )$panda
getwd()
# Run ALPACA
alpaca<- panda.to.alpaca(treated_panda_net, control_panda_net, "./TB", verbose=TRUE)
alpaca<- panda.to.alpaca(treated_panda_net, control_panda_net, "./TB", verbose=TRUE)
getwd()
alpaca<- panda.to.alpaca(treated_panda_net, control_panda_net, "TB", verbose=TRUE)
